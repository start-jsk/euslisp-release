;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room73b2-x-leg-desk-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod room73b2-x-leg-desk-object
  (:init
   (&rest args &key (name "room73b2-x-leg-desk") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room73b2-x-leg-desk-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 300.0 600.0 338.198) (float-vector -300.0 600.0 338.198) (float-vector -300.0 -600.0 338.198) (float-vector 300.0 -600.0 338.198)))
         (instance face :init :vertices (list (float-vector -300.0 600.0 298.198) (float-vector 300.0 600.0 298.198) (float-vector 300.0 -600.0 298.198) (float-vector -300.0 -600.0 298.198)))
         (instance face :init :vertices (list (float-vector 300.0 600.0 338.198) (float-vector 300.0 600.0 298.198) (float-vector -300.0 600.0 298.198) (float-vector -300.0 600.0 338.198)))
         (instance face :init :vertices (list (float-vector 300.0 -600.0 338.198) (float-vector 300.0 -600.0 298.198) (float-vector 300.0 600.0 298.198) (float-vector 300.0 600.0 338.198)))
         (instance face :init :vertices (list (float-vector -300.0 -600.0 338.198) (float-vector -300.0 -600.0 298.198) (float-vector 300.0 -600.0 298.198) (float-vector 300.0 -600.0 338.198)))
         (instance face :init :vertices (list (float-vector -300.0 600.0 338.198) (float-vector -300.0 600.0 298.198) (float-vector -300.0 -600.0 298.198) (float-vector -300.0 -600.0 338.198)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 67.5 -309.359 327.037) (float-vector 42.5 -309.359 327.037) (float-vector 42.5 -327.037 309.359) (float-vector 67.5 -327.037 309.359)))
         (instance face :init :vertices (list (float-vector 42.5 327.037 -309.359) (float-vector 67.5 327.037 -309.359) (float-vector 67.5 309.359 -327.037) (float-vector 42.5 309.359 -327.037)))
         (instance face :init :vertices (list (float-vector 67.5 -309.359 327.037) (float-vector 67.5 327.037 -309.359) (float-vector 42.5 327.037 -309.359) (float-vector 42.5 -309.359 327.037)))
         (instance face :init :vertices (list (float-vector 67.5 -327.037 309.359) (float-vector 67.5 309.359 -327.037) (float-vector 67.5 327.037 -309.359) (float-vector 67.5 -309.359 327.037)))
         (instance face :init :vertices (list (float-vector 42.5 -327.037 309.359) (float-vector 42.5 309.359 -327.037) (float-vector 67.5 309.359 -327.037) (float-vector 67.5 -327.037 309.359)))
         (instance face :init :vertices (list (float-vector 42.5 -309.359 327.037) (float-vector 42.5 327.037 -309.359) (float-vector 42.5 309.359 -327.037) (float-vector 42.5 -327.037 309.359)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 67.5 327.037 309.359) (float-vector 42.5 327.037 309.359) (float-vector 42.5 309.359 327.037) (float-vector 67.5 309.359 327.037)))
         (instance face :init :vertices (list (float-vector 42.5 -309.359 -327.037) (float-vector 67.5 -309.359 -327.037) (float-vector 67.5 -327.037 -309.359) (float-vector 42.5 -327.037 -309.359)))
         (instance face :init :vertices (list (float-vector 67.5 327.037 309.359) (float-vector 67.5 -309.359 -327.037) (float-vector 42.5 -309.359 -327.037) (float-vector 42.5 327.037 309.359)))
         (instance face :init :vertices (list (float-vector 67.5 309.359 327.037) (float-vector 67.5 -327.037 -309.359) (float-vector 67.5 -309.359 -327.037) (float-vector 67.5 327.037 309.359)))
         (instance face :init :vertices (list (float-vector 42.5 309.359 327.037) (float-vector 42.5 -327.037 -309.359) (float-vector 67.5 -327.037 -309.359) (float-vector 67.5 309.359 327.037)))
         (instance face :init :vertices (list (float-vector 42.5 327.037 309.359) (float-vector 42.5 -309.359 -327.037) (float-vector 42.5 -327.037 -309.359) (float-vector 42.5 309.359 327.037)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -42.5 -309.359 327.037) (float-vector -67.5 -309.359 327.037) (float-vector -67.5 -327.037 309.359) (float-vector -42.5 -327.037 309.359)))
         (instance face :init :vertices (list (float-vector -67.5 327.037 -309.359) (float-vector -42.5 327.037 -309.359) (float-vector -42.5 309.359 -327.037) (float-vector -67.5 309.359 -327.037)))
         (instance face :init :vertices (list (float-vector -42.5 -309.359 327.037) (float-vector -42.5 327.037 -309.359) (float-vector -67.5 327.037 -309.359) (float-vector -67.5 -309.359 327.037)))
         (instance face :init :vertices (list (float-vector -42.5 -327.037 309.359) (float-vector -42.5 309.359 -327.037) (float-vector -42.5 327.037 -309.359) (float-vector -42.5 -309.359 327.037)))
         (instance face :init :vertices (list (float-vector -67.5 -327.037 309.359) (float-vector -67.5 309.359 -327.037) (float-vector -42.5 309.359 -327.037) (float-vector -42.5 -327.037 309.359)))
         (instance face :init :vertices (list (float-vector -67.5 -309.359 327.037) (float-vector -67.5 327.037 -309.359) (float-vector -67.5 309.359 -327.037) (float-vector -67.5 -327.037 309.359)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -42.5 327.037 309.359) (float-vector -67.5 327.037 309.359) (float-vector -67.5 309.359 327.037) (float-vector -42.5 309.359 327.037)))
         (instance face :init :vertices (list (float-vector -67.5 -309.359 -327.037) (float-vector -42.5 -309.359 -327.037) (float-vector -42.5 -327.037 -309.359) (float-vector -67.5 -327.037 -309.359)))
         (instance face :init :vertices (list (float-vector -42.5 327.037 309.359) (float-vector -42.5 -309.359 -327.037) (float-vector -67.5 -309.359 -327.037) (float-vector -67.5 327.037 309.359)))
         (instance face :init :vertices (list (float-vector -42.5 309.359 327.037) (float-vector -42.5 -327.037 -309.359) (float-vector -42.5 -309.359 -327.037) (float-vector -42.5 327.037 309.359)))
         (instance face :init :vertices (list (float-vector -67.5 309.359 327.037) (float-vector -67.5 -327.037 -309.359) (float-vector -42.5 -327.037 -309.359) (float-vector -42.5 309.359 327.037)))
         (instance face :init :vertices (list (float-vector -67.5 327.037 309.359) (float-vector -67.5 -309.359 -327.037) (float-vector -67.5 -327.037 -309.359) (float-vector -67.5 309.359 327.037)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 320.0 323.374 -337.517) (float-vector 320.0 332.34 -332.34) (float-vector 320.0 337.517 -323.374) (float-vector 320.0 337.517 -313.022) (float-vector 320.0 332.34 -304.056) (float-vector 320.0 323.374 -298.88) (float-vector 320.0 313.022 -298.88) (float-vector 320.0 304.056 -304.056) (float-vector 320.0 298.88 -313.022) (float-vector 320.0 298.88 -323.374) (float-vector 320.0 304.056 -332.34) (float-vector 320.0 313.022 -337.517)))
         (instance face :init :vertices (list (float-vector -320.0 332.34 -332.34) (float-vector -320.0 323.374 -337.517) (float-vector -320.0 313.022 -337.517) (float-vector -320.0 304.056 -332.34) (float-vector -320.0 298.88 -323.374) (float-vector -320.0 298.88 -313.022) (float-vector -320.0 304.056 -304.056) (float-vector -320.0 313.022 -298.88) (float-vector -320.0 323.374 -298.88) (float-vector -320.0 332.34 -304.056) (float-vector -320.0 337.517 -313.022) (float-vector -320.0 337.517 -323.374)))
         (instance face :init :vertices (list (float-vector 320.0 323.374 -337.517) (float-vector -320.0 323.374 -337.517) (float-vector -320.0 332.34 -332.34) (float-vector 320.0 332.34 -332.34)))
         (instance face :init :vertices (list (float-vector 320.0 313.022 -337.517) (float-vector -320.0 313.022 -337.517) (float-vector -320.0 323.374 -337.517) (float-vector 320.0 323.374 -337.517)))
         (instance face :init :vertices (list (float-vector 320.0 304.056 -332.34) (float-vector -320.0 304.056 -332.34) (float-vector -320.0 313.022 -337.517) (float-vector 320.0 313.022 -337.517)))
         (instance face :init :vertices (list (float-vector 320.0 298.88 -323.374) (float-vector -320.0 298.88 -323.374) (float-vector -320.0 304.056 -332.34) (float-vector 320.0 304.056 -332.34)))
         (instance face :init :vertices (list (float-vector 320.0 298.88 -313.022) (float-vector -320.0 298.88 -313.022) (float-vector -320.0 298.88 -323.374) (float-vector 320.0 298.88 -323.374)))
         (instance face :init :vertices (list (float-vector 320.0 304.056 -304.056) (float-vector -320.0 304.056 -304.056) (float-vector -320.0 298.88 -313.022) (float-vector 320.0 298.88 -313.022)))
         (instance face :init :vertices (list (float-vector 320.0 313.022 -298.88) (float-vector -320.0 313.022 -298.88) (float-vector -320.0 304.056 -304.056) (float-vector 320.0 304.056 -304.056)))
         (instance face :init :vertices (list (float-vector 320.0 323.374 -298.88) (float-vector -320.0 323.374 -298.88) (float-vector -320.0 313.022 -298.88) (float-vector 320.0 313.022 -298.88)))
         (instance face :init :vertices (list (float-vector 320.0 332.34 -304.056) (float-vector -320.0 332.34 -304.056) (float-vector -320.0 323.374 -298.88) (float-vector 320.0 323.374 -298.88)))
         (instance face :init :vertices (list (float-vector 320.0 337.517 -313.022) (float-vector -320.0 337.517 -313.022) (float-vector -320.0 332.34 -304.056) (float-vector 320.0 332.34 -304.056)))
         (instance face :init :vertices (list (float-vector 320.0 337.517 -323.374) (float-vector -320.0 337.517 -323.374) (float-vector -320.0 337.517 -313.022) (float-vector 320.0 337.517 -313.022)))
         (instance face :init :vertices (list (float-vector 320.0 332.34 -332.34) (float-vector -320.0 332.34 -332.34) (float-vector -320.0 337.517 -323.374) (float-vector 320.0 337.517 -323.374)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 320.0 -337.517 -323.374) (float-vector 320.0 -332.34 -332.34) (float-vector 320.0 -323.374 -337.517) (float-vector 320.0 -313.022 -337.517) (float-vector 320.0 -304.056 -332.34) (float-vector 320.0 -298.88 -323.374) (float-vector 320.0 -298.88 -313.022) (float-vector 320.0 -304.056 -304.056) (float-vector 320.0 -313.022 -298.88) (float-vector 320.0 -323.374 -298.88) (float-vector 320.0 -332.34 -304.056) (float-vector 320.0 -337.517 -313.022)))
         (instance face :init :vertices (list (float-vector -320.0 -332.34 -332.34) (float-vector -320.0 -337.517 -323.374) (float-vector -320.0 -337.517 -313.022) (float-vector -320.0 -332.34 -304.056) (float-vector -320.0 -323.374 -298.88) (float-vector -320.0 -313.022 -298.88) (float-vector -320.0 -304.056 -304.056) (float-vector -320.0 -298.88 -313.022) (float-vector -320.0 -298.88 -323.374) (float-vector -320.0 -304.056 -332.34) (float-vector -320.0 -313.022 -337.517) (float-vector -320.0 -323.374 -337.517)))
         (instance face :init :vertices (list (float-vector 320.0 -337.517 -323.374) (float-vector -320.0 -337.517 -323.374) (float-vector -320.0 -332.34 -332.34) (float-vector 320.0 -332.34 -332.34)))
         (instance face :init :vertices (list (float-vector 320.0 -337.517 -313.022) (float-vector -320.0 -337.517 -313.022) (float-vector -320.0 -337.517 -323.374) (float-vector 320.0 -337.517 -323.374)))
         (instance face :init :vertices (list (float-vector 320.0 -332.34 -304.056) (float-vector -320.0 -332.34 -304.056) (float-vector -320.0 -337.517 -313.022) (float-vector 320.0 -337.517 -313.022)))
         (instance face :init :vertices (list (float-vector 320.0 -323.374 -298.88) (float-vector -320.0 -323.374 -298.88) (float-vector -320.0 -332.34 -304.056) (float-vector 320.0 -332.34 -304.056)))
         (instance face :init :vertices (list (float-vector 320.0 -313.022 -298.88) (float-vector -320.0 -313.022 -298.88) (float-vector -320.0 -323.374 -298.88) (float-vector 320.0 -323.374 -298.88)))
         (instance face :init :vertices (list (float-vector 320.0 -304.056 -304.056) (float-vector -320.0 -304.056 -304.056) (float-vector -320.0 -313.022 -298.88) (float-vector 320.0 -313.022 -298.88)))
         (instance face :init :vertices (list (float-vector 320.0 -298.88 -313.022) (float-vector -320.0 -298.88 -313.022) (float-vector -320.0 -304.056 -304.056) (float-vector 320.0 -304.056 -304.056)))
         (instance face :init :vertices (list (float-vector 320.0 -298.88 -323.374) (float-vector -320.0 -298.88 -323.374) (float-vector -320.0 -298.88 -313.022) (float-vector 320.0 -298.88 -313.022)))
         (instance face :init :vertices (list (float-vector 320.0 -304.056 -332.34) (float-vector -320.0 -304.056 -332.34) (float-vector -320.0 -298.88 -323.374) (float-vector 320.0 -298.88 -323.374)))
         (instance face :init :vertices (list (float-vector 320.0 -313.022 -337.517) (float-vector -320.0 -313.022 -337.517) (float-vector -320.0 -304.056 -332.34) (float-vector 320.0 -304.056 -332.34)))
         (instance face :init :vertices (list (float-vector 320.0 -323.374 -337.517) (float-vector -320.0 -323.374 -337.517) (float-vector -320.0 -313.022 -337.517) (float-vector 320.0 -313.022 -337.517)))
         (instance face :init :vertices (list (float-vector 320.0 -332.34 -332.34) (float-vector -320.0 -332.34 -332.34) (float-vector -320.0 -323.374 -337.517) (float-vector 320.0 -323.374 -337.517)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :darkgoldenrod2)
     (send (elt bc 1) :set-color :gray20)
     (send (elt bc 2) :set-color :gray20)
     (send (elt bc 3) :set-color :gray20)
     (send (elt bc 4) :set-color :gray20)
     (send (elt bc 5) :set-color :gray20)
     (send (elt bc 6) :set-color :gray20)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room73b2-x-leg-desk-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room73b2-x-leg-desk (&rest args) (instance* room73b2-x-leg-desk-object :init args))
;; (format *error-output* "(instance room73b2-x-leg-desk-object :init) for generating model~%")
